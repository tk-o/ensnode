name: "Test: CI"

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:

jobs:
  audit:
    name: "Audit Dependencies"
    runs-on: blacksmith-4vcpu-ubuntu-2204
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
      - uses: useblacksmith/setup-node@v5
        with:
          node-version-file: .nvmrc
      - run: pnpm audit --audit-level=moderate

  prepublish:
    name: "Build NPM Packages"
    runs-on: blacksmith-4vcpu-ubuntu-2204
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
      - uses: useblacksmith/setup-node@v5
        with:
          node-version-file: .nvmrc
      - run: pnpm install --frozen-lockfile
      - run: pnpm packages:prepublish

  static-analysis:
    name: "Static Analysis"
    runs-on: blacksmith-4vcpu-ubuntu-2204
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
      - uses: useblacksmith/setup-node@v5
        with:
          node-version-file: .nvmrc
      - run: pnpm install --frozen-lockfile

      - name: Run Biome CI
        run: pnpm lint:ci

      - name: Run TypeScript Typecheck
        run: pnpm typecheck

      - name: Check Terraform Format
        run: terraform fmt -recursive -check -diff

  unit-tests:
    name: "Unit Tests"
    runs-on: blacksmith-4vcpu-ubuntu-2204
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
      - uses: useblacksmith/setup-node@v5
        with:
          node-version-file: .nvmrc
      - run: pnpm install --frozen-lockfile
      - run: pnpm test

  integrity-check:
    name: "Integrity Check"
    runs-on: blacksmith-4vcpu-ubuntu-2204
    services:
      # run postgres alongside this job
      postgres:
        image: postgres:17
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
      - uses: useblacksmith/setup-node@v5
        with:
          node-version-file: .nvmrc
      - run: pnpm install --frozen-lockfile

      # This will run the dev command in background, and wait up to
      # HEALTH_CHECK_TIMEOUT seconds. It will monitor the log output to
      # ensure the app healthcheck is live. If the command does not
      # print the log with the healthcheck message within that time, the step
      # will exit with a failure.
      # This runtime check uses an ephemeral postgres database that only lives in the CI
      # environment. It will be discarded after the CI run. The app will not
      # check anything beyond the healthcheck as its job is to ensure the app
      # starts successfully only. With the configured RPCs there is likely to
      # be rate limits hit. To prevent that, we use private RPC URLs from
      # GitHub Secrets.
      - name: Run ENSIndexer runtime integrity checks
        env:
          # Note on managing below configuration with GitHub:
          # We use private RPC URLs from GitHub Secrets to avoid rate limits.
          # Public RPC URLs are used as fallbacks for repository forks
          # that don't have the relevant secrets configured.
          NAMESPACE: mainnet
          DATABASE_URL: postgresql://postgres:password@localhost:5432/postgres
          DATABASE_SCHEMA: public
          PLUGINS: subgraph,basenames,lineanames,threedns,protocol-acceleration,registrars,tokenscope
          ENSRAINBOW_URL: https://api.ensrainbow.io
          ENSINDEXER_URL: http://localhost:42069
          ALCHEMY_API_KEY: ${{ secrets.ALCHEMY_API_KEY }}
          # healthcheck script env variables
          HEALTH_CHECK_TIMEOUT: 60
        run: ./.github/scripts/run_ensindexer_healthcheck.sh
